name: iOS CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT: WallaMarvel/WallaMarvel.xcodeproj
  APP_SCHEME: WallaMarvel
  DESTINATION: platform=iOS Simulator,OS=latest,name=iPhone 16 Pro
  CONFIGURATION: Debug
  XCODE_VERSION: '16.4'

jobs:
  build-and-test:
    runs-on: macos-15

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Select Xcode 16.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Show selected toolchain
        run: |
          xcodebuild -version
          swift --version

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Resolve packages
        run: |
          set -eo pipefail
          if [ -n "${WORKSPACE:-}" ]; then
            xcodebuild -resolvePackageDependencies -workspace "${WORKSPACE}"
          else
            xcodebuild -resolvePackageDependencies -project "${PROJECT}"
          fi

      - name: Build app (simulator)
        run: |
          set -eo pipefail
          if [ -n "${WORKSPACE:-}" ]; then
            xcodebuild \
              -workspace "${WORKSPACE}" \
              -scheme "${APP_SCHEME}" \
              -configuration "${CONFIGURATION}" \
              -destination "${DESTINATION}" \
              CODE_SIGNING_ALLOWED=NO \
              build
          else
            xcodebuild \
              -project "${PROJECT}" \
              -scheme "${APP_SCHEME}" \
              -configuration "${CONFIGURATION}" \
              -destination "${DESTINATION}" \
              CODE_SIGNING_ALLOWED=NO \
              build
          fi

      - name: Discover & run Module tests (SPM under /Modules)
        run: |
          set -eo pipefail
          shopt -s nullglob

          for pkgfile in Modules/*/Package.swift; do
            dir="$(dirname "$pkgfile")"

            # Extract package name and whether it has test targets
            json="$(swift package --package-path "$dir" dump-package)"
            name="$(printf '%s' "$json" | python3 -c 'import sys,json; d=json.load(sys.stdin); print(d["name"])')"
            has_tests="$(printf '%s' "$json" | python3 -c 'import sys,json; d=json.load(sys.stdin); print(any(t.get("type")=="test" for t in d.get("targets",[])))')"

            if [ "$has_tests" = "True" ] || [ "$has_tests" = "true" ]; then
              echo "→ Running tests for package: ${name} at ${dir}"
              bundle="Modules-${name}.xcresult"

              ran=""
              for scheme in "${name}-Package" "${name}"; do
                # Check if the scheme exists for this package
                if xcodebuild -list -json -packagePath "$dir" | \
                   python3 -c 'import sys,json; d=json.load(sys.stdin); schemes=(d.get("schemes") or d.get("project",{}).get("schemes",[])) or []; target=sys.argv[1]; sys.exit(0 if target in schemes else 1)' "$scheme"
                then
                  # Run tests with the first matching scheme
                  xcodebuild test \
                    -packagePath "$dir" \
                    -scheme "$scheme" \
                    -destination "${DESTINATION}" \
                    -resultBundlePath "$bundle" \
                    CODE_SIGNING_ALLOWED=NO
                  ran="yes"
                  break
                fi
              done

              if [ -z "$ran" ]; then
                echo "⚠️  No matching scheme found for ${name} (tried '${name}-Package' and '${name}'). Skipping."
              fi
            else
              echo "ℹ️  Package ${name} has no test targets (skipping)"
            fi
          done

          shopt -u nullglob


      - name: Run UI tests (app scheme)
        run: |
          set -eo pipefail
          UI_BUNDLE="UITests-${APP_SCHEME}.xcresult"
          if [ -n "${WORKSPACE:-}" ]; then
            xcodebuild test \
              -workspace "${WORKSPACE}" \
              -scheme "${APP_SCHEME}" \
              -configuration "${CONFIGURATION}" \
              -destination "${DESTINATION}" \
              -resultBundlePath "${UI_BUNDLE}" \
              CODE_SIGNING_ALLOWED=NO
          else
            xcodebuild test \
              -project "${PROJECT}" \
              -scheme "${APP_SCHEME}" \
              -configuration "${CONFIGURATION}" \
              -destination "${DESTINATION}" \
              -resultBundlePath "${UI_BUNDLE}" \
              CODE_SIGNING_ALLOWED=NO
          fi

      - name: Upload .xcresult bundles
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcresults
          path: |
            *.xcresult
          if-no-files-found: ignore
