name: iOS CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT: WallaMarvel/WallaMarvel.xcodeproj
  APP_SCHEME: WallaMarvel
  DESTINATION: platform=iOS Simulator,OS=latest,name=iPhone 16 Pro
  CONFIGURATION: Debug
  XCODE_VERSION: '16.4'

jobs:
  build-and-test:
    runs-on: macos-15

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Select Xcode 16.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Show selected toolchain
        run: |
          xcodebuild -version
          swift --version

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Resolve packages
        run: |
          set -eo pipefail
          if [ -n "${WORKSPACE:-}" ]; then
            xcodebuild -resolvePackageDependencies -workspace "${WORKSPACE}"
          else
            xcodebuild -resolvePackageDependencies -project "${PROJECT}"
          fi

      - name: Build app (simulator)
        run: |
          set -eo pipefail
          if [ -n "${WORKSPACE:-}" ]; then
            xcodebuild \
              -workspace "${WORKSPACE}" \
              -scheme "${APP_SCHEME}" \
              -configuration "${CONFIGURATION}" \
              -destination "${DESTINATION}" \
              CODE_SIGNING_ALLOWED=NO \
              build
          else
            xcodebuild \
              -project "${PROJECT}" \
              -scheme "${APP_SCHEME}" \
              -configuration "${CONFIGURATION}" \
              -destination "${DESTINATION}" \
              CODE_SIGNING_ALLOWED=NO \
              build
          fi

      - name: List project/workspace schemes
        run: |
          if [ -n "${WORKSPACE:-}" ]; then
            xcodebuild -list -json -workspace "${WORKSPACE}"
          else
            xcodebuild -list -json -project "${PROJECT}"
          fi | python3 -c 'import sys,json; d=json.load(sys.stdin); print("\n".join((d.get("schemes") or (d.get("project") or {}).get("schemes",[])) or []))'
  
      - name: Run SPM package tests (macOS host)
        run: |
          set -eo pipefail
          shopt -s nullglob
          fail=0

          for pkgfile in Modules/*/Package.swift; do
            dir="$(dirname "$pkgfile")"

            # Read package metadata
            json="$(swift package --package-path "$dir" dump-package || true)"
            if [ -z "$json" ]; then
              echo "⚠️  Could not parse $dir/Package.swift (skipping)"; continue
            fi
            name="$(printf '%s' "$json" | python3 -c 'import sys,json; d=json.load(sys.stdin); print(d["name"])')"
            has_tests="$(printf '%s' "$json" | python3 -c 'import sys,json; d=json.load(sys.stdin); print(any(t.get(\"type\")==\"test\" for t in d.get(\"targets\",[])))')"

            if [[ "$has_tests" =~ ^(True|true)$ ]]; then
              echo "→ swift test: $name ($dir)"
              if ! swift test --package-path "$dir" --enable-code-coverage; then
                echo "❌ swift test failed for $name."
                echo "   If this package is iOS-only, add its test bundle to an Xcode scheme/test plan (see option B)."
                fail=1
              fi
            else
              echo "ℹ️  $name has no test targets (skipping)"
            fi
          done

          shopt -u nullglob
          exit $fail

      - name: Run UI tests (app scheme)
        run: |
          set -eo pipefail
          UI_BUNDLE="UITests-${APP_SCHEME}.xcresult"
          if [ -n "${WORKSPACE:-}" ]; then
            xcodebuild test \
              -workspace "${WORKSPACE}" \
              -scheme "${APP_SCHEME}" \
              -configuration "${CONFIGURATION}" \
              -destination "${DESTINATION}" \
              -resultBundlePath "${UI_BUNDLE}" \
              CODE_SIGNING_ALLOWED=NO
          else
            xcodebuild test \
              -project "${PROJECT}" \
              -scheme "${APP_SCHEME}" \
              -configuration "${CONFIGURATION}" \
              -destination "${DESTINATION}" \
              -resultBundlePath "${UI_BUNDLE}" \
              CODE_SIGNING_ALLOWED=NO
          fi

      - name: Upload .xcresult bundles
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcresults
          path: |
            *.xcresult
          if-no-files-found: ignore
