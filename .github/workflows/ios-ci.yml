name: iOS CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT: WallaMarvel/WallaMarvel.xcodeproj           
  APP_SCHEME: WallaMarvel                      # scheme that contains UI tests
  DESTINATION: platform=iOS Simulator,OS=18.5,name=iPhone 16 Pro
  CONFIGURATION: Debug
  XCODE_VERSION: '16.4'

jobs:
  build-and-test:
    runs-on: macos-15

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Select Xcode (optional)
        if: env.XCODE_VERSION != ''
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Cache SPM
        uses: actions/cache@v4
        with:
          path: |
            ~/.swiftpm
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Resolve packages
        shell: bash
        run: |
          set -eo pipefail
          if [ -n "${WORKSPACE}" ]; then
            xcodebuild -resolvePackageDependencies -workspace "${WORKSPACE}"
          else
            xcodebuild -resolvePackageDependencies -project "${PROJECT}"
          fi

      - name: Build app (simulator)
        shell: bash
        run: |
          set -eo pipefail
          if [ -n "${WORKSPACE}" ]; then
            xcodebuild \
              -workspace "${WORKSPACE}" \
              -scheme "${APP_SCHEME}" \
              -configuration "${CONFIGURATION}" \
              -destination "${DESTINATION}" \
              CODE_SIGNING_ALLOWED=NO \
              build
          else
            xcodebuild \
              -project "${PROJECT}" \
              -scheme "${APP_SCHEME}" \
              -configuration "${CONFIGURATION}" \
              -destination "${DESTINATION}" \
              CODE_SIGNING_ALLOWED=NO \
              build
          fi

            - name: Discover & run Module tests (SPM under /Modules)
        id: module-tests
        shell: bash
        run: |
          set -eo pipefail

          # Runs xcodebuild test for a given *scheme name*.
          run_tests_for_scheme () {
            local scheme="$1"
            local bundle="Modules-${scheme}.xcresult"
            echo "â†’ Running tests for scheme: ${scheme}"
            if [ -n "${WORKSPACE:-}" ]; then
              xcodebuild test \
                -workspace "${WORKSPACE}" \
                -scheme "${scheme}" \
                -configuration "${CONFIGURATION}" \
                -destination "${DESTINATION}" \
                -resultBundlePath "${bundle}" \
                CODE_SIGNING_ALLOWED=NO
            else
              xcodebuild test \
                -project "${PROJECT}" \
                -scheme "${scheme}" \
                -configuration "${CONFIGURATION}" \
                -destination "${DESTINATION}" \
                -resultBundlePath "${bundle}" \
                CODE_SIGNING_ALLOWED=NO
            fi
          }

          # Chooses a testable scheme for a given *package name*.
          run_tests_for_package () {
            local pkg="$1"
            local candidates=("${pkg}-Package" "${pkg}")
            local chosen=""

            for s in "${candidates[@]}"; do
              if [ -n "${WORKSPACE:-}" ]; then
                if xcodebuild -workspace "${WORKSPACE}" -scheme "${s}" -showBuildSettings >/dev/null 2>&1; then
                  chosen="$s"; break
                fi
              else
                if xcodebuild -project "${PROJECT}" -scheme "${s}" -showBuildSettings >/dev/null 2>&1; then
                  chosen="$s"; break
                fi
              fi
            done

            if [ -z "$chosen" ]; then
              echo "No scheme found for package '${pkg}' (skipping)"; return 0
            fi

            run_tests_for_scheme "$chosen"
          }

          # Get package names:
          # 1) If .ci/module-schemes.txt exists, use those lines as *package names* (not scheme names).
          # 2) Else, auto-discover by reading Modules/*/Package.swift and taking the package "name".
          declare -a PACKAGES=()
          if [ -f .ci/module-schemes.txt ]; then
            while IFS= read -r line; do
              line="$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
              [ -z "$line" ] && continue
              PACKAGES+=("$line")
            done < .ci/module-schemes.txt
          else
            shopt -s nullglob
            for pkgfile in Modules/*/Package.swift; do
              dir="$(dirname "$pkgfile")"
              json="$(swift package --package-path "$dir" dump-package)"
              name="$(printf '%s' "$json" | python3 -c 'import sys,json; d=json.load(sys.stdin); print(d["name"])')"
              has_tests="$(printf '%s' "$json" | python3 -c 'import sys,json; d=json.load(sys.stdin); print(any(t.get("type")=="test" for t in d.get("targets",[])))')"
              if [ "$has_tests" = "True" ] || [ "$has_tests" = "true" ]; then
                PACKAGES+=("$name")
              fi
            done
            shopt -u nullglob
          fi

          # De-dupe package names and run their tests
          printf "%s\n" "${PACKAGES[@]}" | awk '{$1=$1};1' | sort -u | while read -r pkg; do
            [ -z "$pkg" ] && continue
            run_tests_for_package "$pkg"
          done

      - name: Run UI tests (app scheme)
        shell: bash
        run: |
          set -eo pipefail
          UI_BUNDLE="UITests-${APP_SCHEME}.xcresult"
          if [ -n "${WORKSPACE}" ]; then
            xcodebuild test \
              -workspace "${WORKSPACE}" \
              -scheme "${APP_SCHEME}" \
              -configuration "${CONFIGURATION}" \
              -destination "${DESTINATION}" \
              -resultBundlePath "${UI_BUNDLE}" \
              CODE_SIGNING_ALLOWED=NO
          else
            xcodebuild test \
              -project "${PROJECT}" \
              -scheme "${APP_SCHEME}" \
              -configuration "${CONFIGURATION}" \
              -destination "${DESTINATION}" \
              -resultBundlePath "${UI_BUNDLE}" \
              CODE_SIGNING_ALLOWED=NO
          fi

      - name: Upload .xcresult bundles
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcresults
          path: |
            *.xcresult
          if-no-files-found: ignore
